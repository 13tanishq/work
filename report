
2. Repository: smx-widgets
Objective:
Develop automated tests to validate widget presence, resolve Node.js build issues, and address security vulnerabilities in frontend dependencies.
Key Contributions:
•	Frontend Unit Test Development:
o	Wrote test cases in TypeScript using Mocha and Chai to validate custom elements like smx-confirmation-client-effectiveness-rate.
o	Implemented DOM polling logic using sleep(ms) for dynamic widget rendering.
o	Added null checks and robust assertions to handle flaky test runs.
•	TypeScript Code Fixes:
o	Refactored invalid variable declarations and resolved syntax issues.
o	Improved test stability with async blocks and clearer error messages.
•	Build and Compatibility Fixes:
o	Identified build failures due to node-sass incompatibility with Node.js v23.
o	Resolved the issue by either downgrading Node.js to v18 or migrating to sass.
o	Used PowerShell to emulate Unix commands in Windows (e.g., Remove-Item -Recurse -Force) for environment cleanup.
•	Security Patching:
o	Identified and remediated prototype pollution vulnerability in the minimist package.
o	Enforced patched versions manually using npm-force-resolutions due to lack of npm audit support in private registry.
o	Removed and regenerated node_modules and package-lock.json followed by npm install --legacy-peer-deps.
•	Build Tool Configuration:
o	Configured Python paths in npm config to ensure compatibility with native module builds like node-gyp.
Technical Skills Gained:
•	Handling frontend automation in asynchronous UI environments.
•	Managing dependency conflicts and deprecated packages in Node.js.
•	Securing package resolutions and working within private registry constraints.


"map_function": "CASE WHEN datamodel_trade.reference = 'TRADE_ON_OTC_V2' THEN element_at(transform(flatten(transform(product.productStream, x -> x.legType IN ('Far','Forward') AND exists(x.notionalAmount, n -> n.amountType = 'Current' AND exists(x.underlying, u -> u.fxCurrencyPair.currency1 = n.currency)))), z -> cast(z.amount as decimal(20,2))), 1) END"
"map_function": "CASE WHEN datamodel_trade.reference = 'TRADE_ON_OTC_V2' THEN transform(element_at(filter(transform(product.productStream, x -> filter(x.notionalAmount, n -> n.amountType = 'Current' and exists(x.underlying, u -> u.fxCurrencyPair.currency1 = n.currency)))[0]), y -> y.legType in ('Far','Forward')), 1).amount, z -> cast(z as decimal(20,2))) END"
