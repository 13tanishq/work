private List<Object> getAllFieldValues(Object root, String fieldPath) throws Exception {
    String[] fields = fieldPath.split("\\.");
    List<Object> currentObjs = Collections.singletonList(root);
    for (String f : fields) {
        List<Object> nextObjs = new ArrayList<>();
        for (Object obj : currentObjs) {
            if (obj == null) continue;
            Field field = findField(obj.getClass(), f); // should support superclasses
            if (field == null) continue;
            field.setAccessible(true);
            Object value = field.get(obj);
            if (value instanceof Collection<?>) {
                nextObjs.addAll((Collection<?>) value);
            } else {
                nextObjs.add(value);
            }
        }
        currentObjs = nextObjs;
    }
    return currentObjs;
}



for (var fieldEntry : fieldRules.entrySet()) {
    try {
        String field = fieldEntry.getKey();
        List<Object> values = getAllFieldValues(dto, field);
        for (Object valueObj : values) {
            String value = (valueObj == null) ? null : valueObj.toString();
            for (FieldRule rule : fieldEntry.getValue()) {
                if (!rule.isValid(value)) {
                    result.add(new Violation(field, rule.message));
                }
            }
        }
    } catch (Exception ignored) {}
}
