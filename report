// EmailRequest and other DTOs must have setters/getters!

@SpringBootTest
@AutoConfigureMockMvc
public class ConsumerControllerValidationTests {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testValidEmailRequestPassesValidation() throws Exception {
        String validJson = """
        {
          "fromAddress": "sender@test.com",
          "receiverInfo": {
            "toAddresses": ["recipient@test.com"]
          },
          "data": {
           "body": "Hello, world!",
           "subject": "Test subject"
          },
          "sndcod": "ABC"
        }
        """;

        mockMvc.perform(post("/api/v1/requests/email")
                .contentType(MediaType.APPLICATION_JSON)
                .content(validJson))
                .andExpect(status().isOk());
    }

    @Test
    public void testMissingSndCodFailsValidation() throws Exception {
        String invalidJson = """
        {
          "fromAddress": "sender@test.com",
          "receiverInfo": {
            "toAddresses": ["recipient@test.com"]
          },
          "data": {
           "body": "Hello, world!",
           "subject": "Test subject"
          }
          // 'sndcod' missing!
        }
        """;

        mockMvc.perform(post("/api/v1/requests/email")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidJson))
                .andExpect(status().isBadRequest()) // 400 error
                .andExpect(content().string(org.hamcrest.Matchers.containsString("sndcod")));
    }

    @Test
    public void testMalformedJsonTriggersExceptionHandler() throws Exception {
        String malformedJson = """
        {
          "fromAddress": "sender@test.com"
        // missing closing braces and quotes!
        """;

        mockMvc.perform(post("/api/v1/requests/email")
                .contentType(MediaType.APPLICATION_JSON)
                .content(malformedJson))
                .andExpect(status().isBadRequest()) // or .isInternalServerError depending on setup
                .andExpect(content().string(org.hamcrest.Matchers.containsString("Malformed JSON")));
    }

    // Add further tests for different DTOs/endpoints as needed
}
