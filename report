import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import java.util.List;

@RestControllerAdvice
public class GlobalExceptionHandler {

    // Your existing handler(s) can remain here...
    @ExceptionHandler(ServiceRequestException.class)
    public ResponseEntity<String> handleValidationErrors(ServiceRequestException ex) {
        return new ResponseEntity<String>(ex.getMessage(), HttpStatus.BAD_REQUEST);
    }
    
    /**
     * âœ… THIS IS THE PERFECTED METHOD TO ADD.
     * It will catch your custom exception and use your ErrorResponse class to format the JSON output.
     */
    @ExceptionHandler(ClientBadRequestException.class)
    public ResponseEntity<ErrorResponse> handleClientBadRequestException(ClientBadRequestException ex) {
        
        // Get the message and error list from your exception
        String message = ex.getMessage();
        List<String> details = ex.getErrors(); // Using the correct getErrors() method
        
        // Create the error response object that will be serialized to JSON
        ErrorResponse errorResponse = new ErrorResponse(message, details);
        
        // Return the error object with a 400 Bad Request status
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }
}



// Change the line above to this:
// This throws your custom exception, which WILL be handled by the GlobalExceptionHandler.
// We convert the map of errors to a list of error messages.
import java.util.ArrayList; // Make sure to import ArrayList

throw new ClientBadRequestException("Invalid Request", new ArrayList<>(errors.values()));
