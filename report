@RestControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    @Autowired
    private MessageSource messageSource;

    /* -------- 1. JSON syntax errors -------- */
    @Override
    protected ResponseEntity<Object> handleHttpMessageNotReadable(
            HttpMessageNotReadableException ex,
            HttpHeaders headers,
            HttpStatus status,
            WebRequest request) {

        Throwable cause = ex.getCause();
        String field = "body";
        String msg   = "Malformed JSON";

        if (cause instanceof JsonParseException jpe) {
            field = findFieldName(jpe);                 // "toAddresses", etc.
            msg   = messageSource.getMessage(
                       getSyntaxKey(jpe.getOriginalMessage()),
                       null, Locale.getDefault());
        }
        return ResponseEntity.badRequest()
                             .body(List.of(new Violation(field, msg)));
    }

    /* -------- 2. Bean-validation errors -------- */
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex,
            HttpHeaders headers,
            HttpStatus status,
            WebRequest request) {

        List<Violation> violations = ex.getBindingResult()
                                       .getFieldErrors()          // keeps discovery order
                                       .stream()
                                       .map(err -> new Violation(
                                               err.getField(),
                                               err.getDefaultMessage()))
                                       .collect(Collectors.toList());

        return ResponseEntity.badRequest().body(violations);
    }

    /* ----- helpers ----- */

    private String getSyntaxKey(String raw) {
        if (raw.contains("was expecting comma"))           return "json.syntax.error.missing.comma";
        if (raw.contains("Unexpected end-of-input") &&
            raw.contains("Array"))                         return "json.syntax.error.unclosed.array";
        if (raw.contains("Unexpected end-of-input") &&
            raw.contains("Object"))                        return "json.syntax.error.unclosed.object";
        return "json.syntax.error.generic";
    }

    private String findFieldName(JsonParseException jpe) {
        JsonStreamContext ctx = jpe.getProcessor().getParsingContext();
        return (ctx != null && ctx.getCurrentName() != null)
               ? ctx.getCurrentName()
               : "body";
    }

    /* ----- tiny DTO for error items ----- */
    public record Violation(String field, String message) {}
}
