package com.socgen.sirocco.consumerapi.exceptions;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.ArrayList;
import java.util.List;

@RestControllerAdvice
// ✅ Extend this class to handle Spring's built-in exceptions
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    /**
     * ✅ HANDLER FOR MALFORMED JSON
     * This is the specific fix for your issue. It's called when the request body is not valid JSON.
     */
    @Override
    protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
        List<String> details = new ArrayList<>();
        // Provides a more specific error than just the message, e.g., location of the syntax error.
        details.add(ex.getLocalizedMessage()); 
        
        ErrorResponse errorResponse = new ErrorResponse("Malformed JSON request", details);
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    /**
     * ✅ HANDLER FOR VALIDATION FAILURES (@Valid)
     * This handles cases where the JSON is valid, but the data violates your validation rules (e.g., @NotNull, @Size).
     */
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
        List<String> details = new ArrayList<>();
        ex.getBindingResult().getFieldErrors().forEach(error -> 
            details.add(error.getField() + ": " + error.getDefaultMessage())
        );
        
        ErrorResponse errorResponse = new ErrorResponse("Validation Failed", details);
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }
    
    /**
     * Your existing custom exception handler for ClientBadRequestException.
     * It's good practice to make all handlers return a consistent ErrorResponse object.
     */
    @ExceptionHandler(ClientBadRequestException.class)
    public ResponseEntity<ErrorResponse> handleClientBadRequestException(ClientBadRequestException ex) {
        // Assuming your ErrorResponse constructor can handle a message and a list of errors.
        ErrorResponse errorResponse = new ErrorResponse(ex.getMessage(), ex.getErrors()); 
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    /**
     * Your existing handler for ServiceRequestException.
     * This is kept for any other specific bad requests you might throw manually.
     */
    @ExceptionHandler(ServiceRequestException.class)
    public ResponseEntity<String> handleValidationErrors(ServiceRequestException ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);
    }
}








/**
     * ✅ HANDLER FOR YOUR CUSTOM UNAUTHORIZED EXCEPTION
     * This is called when you manually throw a ClientUnauthorizedException from your code,
     * for example when a user is authenticated but lacks specific permissions.
     */
    @ExceptionHandler(ClientUnauthorizedException.class)
    public ResponseEntity<ErrorResponse> handleClientUnauthorizedException(ClientUnauthorizedException ex) {
        // Assuming ClientUnauthorizedException has a structure similar to your other exceptions.
        // If it only has a message, you might need to adjust this.
        ErrorResponse errorResponse = new ErrorResponse(ex.getMessage(), ex.getErrors()); 
        
        // Return a 401 Unauthorized status
        return new ResponseEntity<>(errorResponse, HttpStatus.UNAUTHORIZED);
    }
