// Add these imports to the top of your GlobalExceptionHandler.java file
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;

// ...

// Replace the existing method with this new version
@Override
protected ResponseEntity<Object> handleHttpMessageNotReadable(
        HttpMessageNotReadableException ex,
        HttpHeaders headers,
        HttpStatus status,
        WebRequest request) {

    String friendlyMessage;
    Throwable cause = ex.getCause();

    // Check if the root cause is a JSON parsing error
    if (cause instanceof JsonParseException) {
        JsonParseException jpe = (JsonParseException) cause;
        friendlyMessage = String.format(
            "The request could not be understood due to a syntax error in the JSON. The error is near line %d, column %d. Please check for issues like missing commas, brackets [], or braces {}.",
            jpe.getLocation().getLineNr(),
            jpe.getLocation().getColumnNr()
        );
    // Optional: Add a check for type mismatches (e.g., sending "abc" for a number field)
    } else if (cause instanceof InvalidFormatException) {
        InvalidFormatException ife = (InvalidFormatException) cause;
        String fieldName = ife.getPath().stream()
                                .map(ref -> ref.getFieldName())
                                .findFirst().orElse("unknown field");
        friendlyMessage = String.format(
            "The value provided for the field '%s' has the wrong format. Please provide a value of the correct type.",
            fieldName
        );
    } else {
        // Generic fallback message
        friendlyMessage = "The request body is malformed or contains invalid JSON.";
    }

    // Create the ErrorResponse, passing null or an empty list for the details
    // so it doesn't appear in the final JSON output.
    ErrorResponse errorResponse = new ErrorResponse(friendlyMessage, null);

    return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
}
